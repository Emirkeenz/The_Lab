import os
import json
from telegram import Update
from telegram.ext import ContextTypes
from utils.parser import load_or_build_index
from utils.ollama_client import summarize_text, query_ollama
from llama_index.core.settings import Settings

CHUNKS_DIR = "lesson_chunks"

# === –ö–æ–º–∞–Ω–¥–∞ /start_lesson <–∏–º—è> ===
async def start_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if not args:
        available = list_available_lessons()
        msg = "‚ö†Ô∏è –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞: /start_lesson <–Ω–∞–∑–≤–∞–Ω–∏–µ>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏:\n" + "\n".join(available)
        await update.message.reply_text(msg)
        return

    lesson_name = args[0].split('.')[0]  # —É–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    safe_name = "".join(c if c.isalnum() or c in ("_", "-") else "_" for c in lesson_name)
    file_path = f"{CHUNKS_DIR}/math/{safe_name}.json"

    if not os.path.exists(file_path):
        await update.message.reply_text(f"‚ö†Ô∏è –£—Ä–æ–∫ ¬´{lesson_name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ /upload_lesson.")
        return

    with open(file_path, "r", encoding="utf-8") as f:
        chunks = json.load(f)

    context.user_data.update({
        "lesson_name": safe_name,
        "lesson_chunks": chunks,
        "lesson_index": 0,
        "lesson_index_obj": load_or_build_index(chunks, "math", lesson_name),
    })

    # üîç –°–∞–º–º–∞—Ä–∏
    summary = summarize_text("\n".join(chunks[:5]))  # –ø–µ—Ä–≤—ã–µ 5 –∫—É—Å–∫–æ–≤ ‚Äî –æ–±—ã—á–Ω–æ –≤–≤–æ–¥
    await update.message.reply_text(f"üìò –°–∞–º–º–∞—Ä–∏ —É—Ä–æ–∫–∞ ¬´{lesson_name}¬ª:\n\n{summary}\n\n–ì–æ—Ç–æ–≤ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–∏—à–∏ ¬´–≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ¬ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —É—á–µ–Ω–∏–∫–∞ ===
async def handle_lesson_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    user_data = context.user_data

    if "lesson_chunks" not in user_data or "lesson_index_obj" not in user_data:
        await update.message.reply_text("‚ö†Ô∏è –£—Ä–æ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ù–∞–ø–∏—à–∏ /start_lesson <–∏–º—è_—É—Ä–æ–∫–∞>")
        return

    if "–≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ" in text:
        await update.message.reply_text("üéâ –û—Ç–ª–∏—á–Ω–æ! –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
        context.user_data.clear()
        return

    Settings.llm = None

    index = user_data["lesson_index_obj"]
    query_engine = index.as_query_engine()
    response = query_engine.query(text)
    await update.message.reply_text(f"ü§ñ –û—Ç–≤–µ—Ç:\n{response}")

# === –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ ===
def list_available_lessons():
    folder = os.path.join(CHUNKS_DIR, "math")
    if not os.path.exists(folder):
        return []
    return [f.replace(".json", "") for f in os.listdir(folder) if f.endswith(".json")]
