from telegram import Update
from telegram.ext import ContextTypes
import json
import os

# === –ù–∞—á–∞–ª–æ —É—Ä–æ–∫–∞ (–ø–æ –∫–æ–º–∞–Ω–¥–µ ¬´–Ω–∞—á–∞—Ç—å —É—Ä–æ–∫¬ª –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—é) ===
async def start_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data

    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞: /start_lesson <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return

    lesson_name = context.args[0]
    safe_name = "".join(c if c.isalnum() or c in ("_", "-") else "_" for c in lesson_name)
    file_path = f"lesson_chunks/math/{safe_name}.json"

    if not os.path.exists(file_path):
        await update.message.reply_text(
            f"‚ö†Ô∏è –£—Ä–æ–∫ ¬´{lesson_name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω."
        )
        return

    with open(file_path, "r", encoding="utf-8") as f:
        chunks = json.load(f)
        chunks = [chunk.strip() for chunk in chunks if chunk.strip()]
        user_data["lesson_chunks"] = chunks
        user_data["lesson_index"] = 0

    await send_current_chunk(update, context)


# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏ —É—Ä–æ–∫–∞ ===
async def send_current_chunk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = context.user_data

    if "lesson_chunks" not in user_data or "lesson_index" not in user_data:
        await update.message.reply_text("‚ö†Ô∏è –£—Ä–æ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        return

    chunks = user_data["lesson_chunks"]
    index = user_data["lesson_index"]

    if index >= len(chunks):
        await update.message.reply_text("‚úÖ –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω!")
        return

    current_text = chunks[index].strip()

    if not current_text:
        await update.message.reply_text("‚ö†Ô∏è –¢–µ–∫—É—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —É—Ä–æ–∫–∞ –ø—É—Å—Ç–æ–π.")
        return

    # üö® –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    MAX_LENGTH = 4096
    for i in range(0, len(current_text), MAX_LENGTH):
        await update.message.reply_text(current_text[i:i + MAX_LENGTH])


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —É—á–µ–Ω–∏–∫–∞ –≤–æ –≤—Ä–µ–º—è —É—Ä–æ–∫–∞ ===
async def handle_lesson_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    text = update.message.text.lower()

    if "lesson_chunks" not in user_data:
        await update.message.reply_text(
            "‚ö†Ô∏è –£—Ä–æ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ—Å–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª."
        )
        return

    idx = user_data.get("lesson_index", 0)
    chunks = user_data.get("lesson_chunks", [])

    if idx >= len(chunks):
        # –£—Ä–æ–∫ —É–∂–µ –∑–∞–∫–æ–Ω—á–µ–Ω
        if "–≤–æ–ø—Ä–æ—Å" in text:
            await update.message.reply_text("–ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!")
        else:
            await update.message.reply_text("–£—Ä–æ–∫ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π, –ø–æ–ø—Ä–æ—Å–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª.")
        return

    if "–æ–±—ä—è—Å–Ω–∏ –ø—Ä–æ—â–µ" in text:
        # –õ–æ–≥–∏–∫–∞ —É–ø—Ä–æ—â–µ–Ω–∏—è ‚Äî –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å AI —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π "–æ–±—ä—è—Å–Ω–∏ –ø—Ä–æ—â–µ"
        simplified_text = await get_simplified_text(chunks[idx])
        await update.message.reply_text(simplified_text)

    elif "—Å–ª–µ–¥—É—é—â–∏–π" in text:
        user_data["lesson_index"] = idx + 1
        await send_current_chunk(update, context)

    else:
        # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–∫—Ä–µ–ø–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏ —Ç.–ø.
        await update.message.reply_text(
            "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–π ‚Äî –Ω–∞–ø–∏—à–∏ ¬´–æ–±—ä—è—Å–Ω–∏ –ø—Ä–æ—â–µ¬ª, "
            "–µ—Å–ª–∏ –≥–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å ‚Äî ¬´—Å–ª–µ–¥—É—é—â–∏–π¬ª."
        )


# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —É AI ===
async def get_simplified_text(text: str) -> str:
    # –¢—É—Ç –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ Ollama —á–µ—Ä–µ–∑ utils/ollama_client.py (–ø–æ–∑–∂–µ —Å–¥–µ–ª–∞–µ–º)
    prompt = f"–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—â–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç:\n\n{text}"
    # –ó–∞–≥–ª—É—à–∫–∞ –ø–æ–∫–∞:
    return f"–£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è:\n{prompt}"
